use sqlx::{Executor, Row, Sqlite};
use std::sync::Arc;
use tracing::{error, info};
use ulid::Ulid;

use crate::models::node_message::NodeMessage;

use super::database::DbPool;

pub struct NewNodeMessage {
    pub id: String,
    pub node_id: String,
    pub content: String,
    pub version_number: i64,
    pub status: String,
}

pub struct UpdateNodeMessage {
    pub content: String,
    pub status: String,
}

/// Service responsible for chat node message operations
#[derive(Clone)]
pub struct NodeMessageService {
    pool: Arc<DbPool>,
}

impl NodeMessageService {
    /// Create a new chat node message service
    pub fn new(pool: Arc<DbPool>) -> Self {
        Self { pool }
    }

    pub async fn get_next_version_number(&self, node_id: &str) -> sqlx::Result<i64> {
        self.get_next_version_number_with_executor(self.pool.get(), node_id)
            .await
    }

    pub async fn get_next_version_number_with_executor<'e, E>(
        &self,
        executor: E,
        node_id: &str,
    ) -> sqlx::Result<i64>
    where
        E: sqlx::Executor<'e, Database = Sqlite>,
    {
        let row = sqlx::query(
            "SELECT COALESCE(MAX(version_number), 0) + 1 FROM node_messages WHERE node_id = ?",
        )
        .bind(node_id)
        .fetch_one(executor)
        .await?;

        Ok(row.get::<i64, _>(0))
    }

    /// Create a message for a node
    pub async fn create(&self, node_message: NewNodeMessage) -> sqlx::Result<String> {
        self.create_with_executor(self.pool.get(), node_message)
            .await
    }

    /// Create a message for a node with a specified executor
    pub async fn create_with_executor<'e, E>(
        &self,
        executor: E,
        node_message: NewNodeMessage,
    ) -> sqlx::Result<String>
    where
        E: sqlx::Executor<'e, Database = Sqlite>,
    {
        let content_id = Ulid::new().to_string();
        sqlx::query("INSERT INTO node_messages (id, node_id, content, version_number, status) VALUES (?, ?, ?, ?, ?)")
            .bind(node_message.id)
            .bind(node_message.node_id)
            .bind(node_message.content)
            .bind(node_message.version_number)
            .bind(node_message.status)
        .execute(executor)
        .await?;

        Ok(content_id)
    }

    pub async fn update(&self, content_id: &str, new_content: &str) -> sqlx::Result<()> {
        self.update_with_executor(self.pool.get(), content_id, new_content)
            .await
    }

    pub async fn update_with_executor<'e, E>(
        &self,
        executor: E,
        content_id: &str,
        new_content: &str,
    ) -> sqlx::Result<()>
    where
        E: sqlx::Executor<'e, Database = Sqlite>,
    {
        sqlx::query("UPDATE node_messages SET content = ? WHERE id = ?")
            .bind(new_content)
            .bind(content_id)
            .execute(executor)
            .await?;

        Ok(())
    }

    pub async fn update_status(&self, content_id: &str, new_status: &str) -> sqlx::Result<()> {
        self.update_status_with_executor(self.pool.get(), content_id, new_status)
            .await
    }

    pub async fn update_status_with_executor<'e, E>(
        &self,
        executor: E,
        content_id: &str,
        new_status: &str,
    ) -> sqlx::Result<()>
    where
        E: sqlx::Executor<'e, Database = Sqlite>,
    {
        sqlx::query("UPDATE node_messages SET status = ? WHERE id = ?")
            .bind(new_status)
            .bind(content_id)
            .execute(executor)
            .await?;

        Ok(())
    }

    pub async fn delete(&self, content_id: &str) -> sqlx::Result<()> {
        self.delete_with_executor(self.pool.get(), content_id).await
    }

    pub async fn delete_with_executor<'e, E>(
        &self,
        executor: E,
        content_id: &str,
    ) -> sqlx::Result<()>
    where
        E: sqlx::Executor<'e, Database = Sqlite>,
    {
        sqlx::query("DELETE FROM node_messages WHERE id = ?")
            .bind(content_id)
            .execute(executor)
            .await?;

        Ok(())
    }

    // Create a new message for a node
    pub async fn create_message(
        &self,
        node_id: String,
        content: String,
        status: Option<String>,
        model_id: Option<String>,
        token_count: Option<i32>,
        cost: Option<f64>,
        api_metadata: Option<serde_json::Value>,
        extensions: Option<serde_json::Value>,
    ) -> Result<NodeMessage, sqlx::Error> {
        let version_number = self.get_next_version_number(&node_id).await?;
        let id = Ulid::new().to_string();
        let status = status.unwrap_or_else(|| "done".to_string()); // Default status
        let api_metadata_str = api_metadata.map(|v| v.to_string());
        let extensions_str = extensions.map(|v| v.to_string());

        // Execute the insert query
        sqlx::query!("INSERT INTO node_messages (id, node_id, content, version_number, status, model_id, token_count, cost, api_metadata, extensions) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            id,
            node_id,
            content,
            version_number,
            status,
            model_id,
            token_count,
            cost,
            api_metadata_str,
            extensions_str
        )
        .execute(&self.pool)
        .await?;

        // Fetch the newly created message
        let message = sqlx::query_as!(NodeMessage, "SELECT * FROM node_messages WHERE id = ?", id)
            .fetch_one(&self.pool)
            .await?;

        Ok(message)
    }

    // Delete a message
    pub async fn delete(&self, id: &str) -> Result<(), sqlx::Error> {
        sqlx::query("DELETE FROM node_messages WHERE id = ?")
            .bind(id)
            .execute(self.pool.get())
            .await?;
        Ok(())
    }

    // Get all messages for a node
    pub async fn get(&self, id: &str) -> Result<NodeMessage, sqlx::Error> {
        let message = sqlx::query_as!(NodeMessage, "SELECT * FROM node_messages WHERE id = ?", id)
            .fetch_one(self.pool.get())
            .await?;
        Ok(message)
    }

    pub async fn find_all_by_node_id(
        &self,
        node_id: &str,
    ) -> Result<Vec<NodeMessage>, sqlx::Error> {
        let messages = sqlx::query_as!(
            NodeMessage,
            "SELECT * FROM node_messages WHERE node_id = ?",
            node_id
        )
        .fetch_all(self.pool.get())
        .await?;
        Ok(messages)
    }
}
